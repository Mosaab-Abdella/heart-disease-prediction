{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOcPjvCeAVwfOVpPb5mw9xA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["The following code was for Streamlit Web UI Development  and  Deployment using Ngrok, however I faced many chalenges. I am working on it\n"],"metadata":{"id":"JI1YcAk0dHfj"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"oVQV6BJvdGSe"},"outputs":[],"source":["#import streamlit as st\n","#import pandas as pd\n","#import joblib\n","\n","## Load model\n","#model = joblib.load(\"final_model.pkl\")\n","\n","#st.title(\"🫀 Heart Disease Prediction App\")\n","#st.markdown(\"Enter the patient's details below to predict the risk of heart disease.\")\n","## Inputs (only features your model expects)\n","#cp = st.selectbox(\"Chest Pain Type\", [\"Typical Angina\", \"Atypical Angina\", \"Non-Anginal\", \"Asymptomatic\"])\n","#thalach = st.number_input(\"Max Heart Rate Achieved\", 70, 220, 150)\n","#exang = st.selectbox(\"Exercise Induced Angina\", [\"No\", \"Yes\"])\n","#oldpeak = st.number_input(\"ST Depression\", 0.0, 10.0, 1.0, step=0.1)\n","#slope = st.selectbox(\"Slope of ST Segment\", [\"Upsloping\", \"Flat\", \"Downsloping\"])\n","#ca = st.number_input(\"Number of Major Vessels (0-3)\", 0, 3, 0)\n","#thal = st.selectbox(\"Thalassemia\", [\"Normal\", \"Fixed Defect\", \"Reversible Defect\"])\n","\n","## Encoding\n","#cp_map = {\"Typical Angina\": 0, \"Atypical Angina\": 1, \"Non-Anginal\": 2, \"Asymptomatic\": 3}\n","#exang_val = 1 if exang == \"Yes\" else 0\n","#slope_map = {\"Upsloping\": 0, \"Flat\": 1, \"Downsloping\": 2}\n","#thal_map = {\"Normal\": 3, \"Fixed Defect\": 6, \"Reversible Defect\": 7}\n","\n","## Create dataframe with exact expected features\n","#input_data = pd.DataFrame([[\n","#    thalach, oldpeak, slope_map[slope], thal_map[thal], ca, exang_val, cp_map[cp]\n","#]], columns=['thalach', 'oldpeak', 'slope', 'thal', 'ca', 'exang', 'cp'])\n","\n","## Predict\n","#if st.button(\"Predict\"):\n"," #   prediction = model.predict(input_data)[0]\n","  #  probability = model.predict_proba(input_data)[0][1]\n","\n","   # if prediction == 1:\n","    #    st.error(f\"⚠️ High Risk of Heart Disease (Probability: {probability:.2f})\")\n","   # else:\n","    #    st.success(f\"✅ No Heart Disease Detected (Probability: {probability:.2f})\")\n","\n"]},{"cell_type":"code","source":["# !pip install -q streamlit pyngrok"],"metadata":{"id":"wAokCnhDdowy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#from pyngrok import ngrok\n","\n","## paste your token here between quotes\n","#ngrok.set_auth_token(\"****\")\n","#print(\"✅ ngrok token applied\")\n"],"metadata":{"id":"lv-SyI8Idqnc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#from pyngrok import ngrok\n","#ngrok.kill()\n","#!pkill -f streamlit || true\n","#print(\"⛔ Killed all old ngrok + streamlit processes\")\n"],"metadata":{"id":"l12K5QvyfjXY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#import time\n","\n","# Kill old tunnels\n","#try:\n"," #   ngrok.kill()\n","#except:\n"," #   pass\n","\n","# #Start a tunnel\n","#public_url = ngrok.connect(8501)\n","#print(\"🌍 Public URL:\", public_url)\n","\n","## Launch streamlit app\n","#!nohup streamlit run app.py --server.port 8501 --server.headless true > streamlit.log 2>&1 &\n","\n","#time.sleep(5)\n","#print(\"✅ Streamlit running. Open the Public URL above in your browser.\")\n"],"metadata":{"id":"HcdpIUFpd6oz","executionInfo":{"status":"ok","timestamp":1758293641676,"user_tz":-180,"elapsed":14,"user":{"displayName":"Mosab Abdella","userId":"16043805174010566712"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"AgepQAEgd7XJ"},"execution_count":null,"outputs":[]}]}